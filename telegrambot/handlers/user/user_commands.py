import sqlite3

from aiogram import Router, F, types
from aiogram.filters import Command
from telegrambot.markups.reply_markups import get_catalog_kb
from telegrambot.markups.inline_markups import *
from aiogram.types import FSInputFile
from difflib import SequenceMatcher

router = Router()


@router.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer('''üëã–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!
–Ø –±–æ—Ç-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∑–¥–µ—Å—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω—ã—Ö –∫–Ω–∏–≥ IT —Ç–µ–º–∞—Ç–∏–∫–∏.
–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–Ω–∏–≥, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É üìö–ö–∞—Ç–∞–ª–æ–≥, –Ω–∞—Ö–æ–¥—è—â—É—é—Å—è –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –∫–Ω–∏–≥–∏ –Ω–∞ —Å–≤–æ—ë–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ ‚ù§Ô∏è–ò–∑–±—Ä–∞–Ω–Ω–æ–µ''',
                         reply_markup=get_catalog_kb())


@router.message(F.text == "üìö–ö–∞—Ç–∞–ª–æ–≥")
async def catalog(message: types.Message):
    await message.answer_photo(caption="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É",
                               reply_markup=get_catalog_inline_kb(),
                               photo="AgACAgIAAxkBAAIBUGZLGcysvhHKmOBucsW5HaA3KIQiAAKz3TEbsqdZSo7qKEs_6LEqAQADAgADeQADNQQ")


@router.message(F.text == "‚ù§Ô∏è–ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def favorite(message: types.Message):
    await message.answer_photo(caption="–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏",
                               photo='AgACAgIAAxkBAAIBhmZLPpYGVwjRstbYxpLq85G4bArcAAKW3jEbsqdZSmqegg673b-3AQADAgADeQADNQQ',
                               reply_markup=get_favorite_book_inline_kb())


@router.callback_query(F.data.startswith("$type$_"))
async def books(callback: types.CallbackQuery):
    book_type = callback.data.split("_", 1)[1]
    await callback.answer()
    await callback.message.answer_photo(
        photo="AgACAgIAAxkBAAIBSmZLF460EHWQMhfw0CZ1DDYehckNAAKs3TEbsqdZSk9B4ovigr1jAQADAgADeQADNQQ",
        caption="–í–æ—Ç –∫–Ω–∏–≥–∏ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞",
        reply_markup=get_book_inline_kb(book_type))


@router.callback_query(F.data.startswith("$load$_"))
async def send_book(callback: types.CallbackQuery):
    await callback.answer()
    book_name = callback.data.split("_", 1)[1]
    with sqlite3.connect("database.db") as connect:
        connect.row_factory = sqlite3.Row
        cursor = connect.cursor()
        cursor.execute(f"""SELECT id_book FROM Books WHERE book_name LIKE '{book_name}%'""")
        book_id = [res['id_book'] for res in cursor][0]
        cursor.execute(f"""SELECT caption FROM Books WHERE book_name LIKE '{book_name}%'""")
        book_caption = [res['caption'] for res in cursor][0]
        cursor.execute(f"""SELECT id_book FROM Like""")
        there_in_like = book_id in [res['id_book'] for res in cursor]
    if not there_in_like:
        await callback.message.answer_document(book_id, caption=book_caption,
                                               reply_markup=add_to_favorites_inline_kb(book_name))

    else:
        await callback.message.answer_document(book_id, caption=book_caption,
                                               reply_markup=remove_from_favorites_inline_kb(book_name))


@router.callback_query(F.data.startswith("$favorite$_"))
async def add_to_favorite(callback: types.CallbackQuery):
    book_name = callback.data.split("_", 1)[1]

    with sqlite3.connect("database.db") as connect:
        connect.row_factory = sqlite3.Row
        cursor = connect.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–∏–≥–∏
        cursor.execute(f"""SELECT * FROM Like WHERE user_id = {callback.from_user.id} AND id_book = (
            SELECT id_book FROM Books WHERE book_name LIKE '{book_name}%')""")
        existing_record = cursor.fetchone()

        if existing_record:
            await callback.answer()
            await callback.message.answer("–ö–Ω–∏–≥–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            cursor.execute(f"""INSERT INTO Like (user_id, id_book) 
                                SELECT {callback.from_user.id}, id_book FROM Books WHERE book_name LIKE '{book_name}%'""")
            await callback.answer()
            await callback.message.answer("–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")


@router.callback_query(F.data.startswith("$delete$_"))
async def delete_from_favorite(callback: types.CallbackQuery):
    book_name = callback.data.split("_", 1)[1]
    with sqlite3.connect("database.db") as connect:
        connect.row_factory = sqlite3.Row
        cursor = connect.cursor()
        cursor.execute(
            f"""DELETE FROM Like WHERE id_book IN (SELECT id_book FROM Books WHERE book_name LIKE '{book_name}%')""")
    await callback.answer()
    await callback.message.answer("–ö–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")


@router.message(F.text)
async def search_book(message: types.Message):
    book_name1 = message.text
    with sqlite3.connect("database.db") as connect:
        connect.row_factory = sqlite3.Row
        cursor = connect.cursor()

        cursor.execute("""SELECT id_book FROM "Like" """)
        ids_book = [res['id_book'] for res in cursor]

        cursor.execute("""SELECT id_book, book_name, caption FROM Books""")

        for res in cursor:
            matcher = SequenceMatcher(None, res['book_name'].lower(), book_name1.lower())
            similarity = matcher.ratio()

            if similarity > 0.4:
                await message.answer("–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É —ç—Ç—É –∫–Ω–∏–≥—É")
                if res['id_book'] in ids_book:
                    await message.answer_document(res['id_book'], caption=res['caption'],
                                                  reply_markup=remove_from_favorites_inline_kb(res['book_name']))
                else:
                    await message.answer_document(res['id_book'], caption=res['caption'],
                                                  reply_markup=add_to_favorites_inline_kb(res['book_name']))
                break
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–Ω–∏–≥–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ")
